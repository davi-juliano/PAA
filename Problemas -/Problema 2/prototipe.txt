#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX 100000

typedef struct arv{
    int info;
    struct arv* esq;
    struct arv*dir;
}TArv;
typedef TArv *PArv;


PArv insereABB(PArv a, int c){     //Função que insere um valor na ABB
    if (a == NULL) {  //Há uma diferença no código do slide, para evitar inserir o mesmo valor duas vezes
        PArv novo=(PArv)malloc(sizeof(TArv));
        novo->esq = NULL;
        novo->dir = NULL;
        novo->info = c;
        a = novo;
    }

    else if (c < a->info)
        a->esq = insereABB(a->esq,c);
    else if (c > a->info)  //Eis a diferença, pois não queremos valores repetidos na ABB
        a->dir = insereABB(a->dir,c);
    else{
        return(a);
    }
}

int busca_bináriaABB(PArv a, int c){ //Função que busca um nó de acordo com o dado dele na ABB
    if (a==NULL)
        return 0; 
    
    else if(c < a->info)
        return(buscaABB(a->esq,c));
    
    else if (c > a->info)
        return(buscaABB(a->dir,c));
    
    else
        return 1;
}

int busca_maiorABB(PArv a){ //Função que busca o maior nó da Árvore Binária
    if (a != NULL){
        return busca_maiorABB(a->dir);
    }
    else{
        return a->info;
    }
}

PArv libera (PArv a){  //Função que libera a árvore 
    if (a!=NULL) {
        libera(a->esq);
        libera(a->dir);
        free(a); 
    }
    return NULL;
}


int main(){
    PArv arvore;
    int n, c, maior_valor, possivel, i, soma;
    int arquivos[MAX];
    
    scanf("%d %d", &n, &c);
    
    for(i=0;i<n;i++){
        scanf("%d", &arquivos[i]);
        arvore = insereABB(arvore, arquivos[i]);
    }
    
    maior_valor = busca_maiorABB(arvore);

    for(i=maior_valor;i>0;i--){
        possivel = c-i;
        
    }

    possivel = c - maior_valor;

    for(i=possivel;i>0;i--){
        if(busca_bináriaABB(arvore, possivel) == 1){
            soma = possivel + maior_valor;
        }
    }
    
    return 0;
}